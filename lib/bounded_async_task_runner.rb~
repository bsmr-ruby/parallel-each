class BoundedAsyncTaskRunner
  attr_reader :max_active_threads

  def initialize(max_active_threads=20)
    @threads = Array.new
    @max_active_threads = max_active_threads
  end

  def do(*args, &block)
    until @threads.size < max_active_threads
      purge_dead
      break if @threads.size < max_active_threads
      # We have still have the maximum number of active threads so we
      # need to wait for one to finish.

      @threads.first.join(0.1)  # Join on the oldest thread because it will probably finish first.
    end
    # We can start new thread without exceeding the threshold

    @threads << Thread.start(*args, &block)
  end

  def wait_for_all_to_finish
    until @threads.empty?
      @threads.first.join
      purge_dead
    end    
  end

  private
  def purge_dead
    @threads.delete_if {|t| !t.alive?}
  end
end
